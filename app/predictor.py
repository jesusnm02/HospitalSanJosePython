import pickle
from pathlib import Path
import subprocess

model_path = Path(__file__).parent / "model.pkl"

if not model_path.exists():
    print("üîÑ Modelo no encontrado. Entrenando modelo...")
    subprocess.run(["python", "train/train_model.py"], check=True)

with open(model_path, "rb") as f:
    vectorizer, model, df = pickle.load(f)

respuestas_generales = {
    "hola": "¬°Hola! ¬øEn qu√© puedo ayudarte con tus s√≠ntomas?",
    "buenos d√≠as": "¬°Buenos d√≠as! Estoy lista para ayudarte.",
    "c√≥mo est√°s": "Estoy perfecto. ¬øQu√© s√≠ntomas deseas analizar?",
    "gracias": "¬°De nada! Si tienes m√°s preguntas m√©dicas, aqu√≠ estoy.",
    "adi√≥s": "¬°Cu√≠date mucho! Hasta luego."
}


def predecir_medicamento(sintomas: str) -> str:
    texto = sintomas.lower().strip()

    # Respuesta general si es un saludo o mensaje informal
    for clave, respuesta in respuestas_generales.items():
        if clave in texto:
            return respuesta

    # Predicci√≥n del modelo
    try:
        X = vectorizer.transform([texto])
        pred = model.predict(X)[0]

        # Buscar informaci√≥n relacionada al medicamento
        fila = df[df["medicamentos"] == pred]
        if fila.empty:
            return ("He detectado una posible coincidencia, pero no tengo informaci√≥n suficiente "
                    "para darte una recomendaci√≥n clara. Por favor consulta con un m√©dico.")

        fila = fila.iloc[0]
        descripcion = fila.get("description", "sin descripci√≥n")
        tratamiento = fila.get("tratamiento", "tratamiento no especificado")

        return (f"Seg√∫n los s√≠ntomas indicados, se sospecha: **{descripcion}**. "
                f"Se recomienda el tratamiento: **{tratamiento}** y administrar **{pred}**.")

    except Exception as e:
        print(f"[Error IA] {e}")
        return ("Ocurri√≥ un error al procesar tu solicitud. Por favor intenta nuevamente o consulta con un m√©dico.")
